<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item7" object-name="workflow:name=generic" id="74cebc5b-eaa6-49e5-b49f-11b66c428386" version="0.0.6" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Delete a Virtual Server]]></display-name>
  <description><![CDATA[Add a virtual server to the Load Balancer.

VMware PSO I&A Selva 08/2015]]></description>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="edgeName" type="string">
      <description><![CDATA[Edge Name]]></description>
    </param>
    <param name="virtualServerName" type="string"/>
  </input>
  <output>
    <param name="errorContent" type="string">
      <description><![CDATA[Error Content]]></description>
    </param>
  </output>
  <attrib name="poolId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Pool Id]]></description>
  </attrib>
  <attrib name="monitorId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Service Monitor ID]]></description>
  </attrib>
  <attrib name="nsxRestHost" type="REST:RESTHost" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[NSX Rest Host]]></description>
  </attrib>
  <attrib name="edgeId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Edge ID]]></description>
  </attrib>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[error code]]></description>
  </attrib>
  <attrib name="virtualServerId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Virtual Server ID]]></description>
  </attrib>
  <attrib name="applicationRuleId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Application Profile ID]]></description>
  </attrib>
  <workflow-item name="item8" type="end" end-mode="0">
    <position y="45.40909090909091" x="684.5"/>
  </workflow-item>
  <workflow-item name="item7" out-name="item9" catch-name="item1" throw-bind-name="errorCode" type="link" linked-workflow-id="d02637fa-eb7c-4d09-8ccb-56f87715170d">
    <display-name><![CDATA[Get NSX and EdgeId]]></display-name>
    <in-binding>
      <bind name="edgeName" type="string" export-name="edgeName"/>
    </in-binding>
    <out-binding>
      <bind name="edgeId" type="string" export-name="edgeId"/>
      <bind name="nsxRestHost" type="REST:RESTHost" export-name="nsxRestHost"/>
    </out-binding>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item8" catch-name="item1" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Delete Virtual Server]]></display-name>
    <script encoded="false"><![CDATA[//Delete VIP

//Delete Virtual Server
var virtrequest = nsxRestHost.createRequest("DELETE", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/virtualservers/" + virtualServerId);
var virtresponse = virtrequest.execute();
System.log("Deleted Virtual Server Id " + virtualServerId);

//Delete Monitor Service
var monrequest = nsxRestHost.createRequest("DELETE", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/monitors/" + monitorId, "");
var monresponse = monrequest.execute();
System.log("Deleted ServiceMonitor Id " + monitorId);

//Delete Pool 
var poolrequest = nsxRestHost.createRequest("DELETE", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/pools/" + poolId);
var poolresponse = poolrequest.execute();
System.log("Deleted Pool Id " + poolId);

//Delete Monitor Service
var monrequest = nsxRestHost.createRequest("DELETE", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/monitors/" + monitorId);
var monresponse = monrequest.execute();
System.log("Deleted ServiceMonitor Id " + monitorId);

//Delete Application Service
var apprequest = nsxRestHost.createRequest("DELETE", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/applicationprofiles/" + applicationProfileId);
var appresponse = apprequest.execute();
System.log("Deleted ApplicationProfile Id " + applicationProfileId);]]></script>
    <in-binding>
      <bind name="nsxRestHost" type="REST:RESTHost" export-name="nsxRestHost"/>
      <bind name="edgeId" type="string" export-name="edgeId"/>
      <bind name="poolId" type="string" export-name="poolId"/>
      <bind name="monitorId" type="string" export-name="monitorId"/>
      <bind name="applicationProfileId" type="string" export-name="applicationRuleId"/>
      <bind name="virtualServerId" type="string" export-name="virtualServerId"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="484.5"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item5" catch-name="item1" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Get Config Details]]></display-name>
    <script encoded="false"><![CDATA[//Get Virtual Server ID

var virtualServerMatchCounter = 0;
// var edgeId
// Create a REST call to query all edges configured

var request = nsxRestHost.createRequest("GET", "/api/4.0/edges/" + edgeId + "/loadbalancer/config/virtualservers");
//System.log("Request URL: " + request.fullUrl);

// Execute the request

var response = request.execute();
var foundRule = false;



// Evaluate the Response

if (response.statusCode == 200) {
 // Get XML response from NSX
 var responseXML = XMLManager.fromString(response.ContentAsString);
 var virtualServerNameList = responseXML.documentElement.getElementsByTagName("name");
 var virtualServerIdList = responseXML.documentElement.getElementsByTagName("virtualServerId");

 // loop through list of edge names in the response. 
 for (x = 0; x < virtualServerNameList.length; x++) {
  if (virtualServerNameList.item(x).firstChild.textContent == virtualServerName) {
   virtualServerId = virtualServerIdList.item(x).firstChild.textContent;
   virtualServerID = virtualServerId;
   //NSXurl = nsxConnectionList[v].url;
   virtualServerMatchCounter++;
   //System.log("Virtual Server ID for " +virtualServerNameList.item(x).firstChild.textContent + " is >> " + virtualServerIdList.item(x).firstChild.textContent)
   //System.log("Virtual Server ID: " +virtualServerId);
   // System.log("NSX URL for " +edgeNameList.item(x).firstChild.textContent + " is >> " + NSXurl)
   if (virtualServerMatchCounter > 1) {
    throw "Multiple virtualservers with the same virtual server name (" + virtualServerName + ") found";
   }
  }
 }
}
if (virtualServerId == null) {
 System.error("Virtual Server -> " + virtualServerName + " doesn't exist");
 throw "Virtual Server -> " + virtualServerName + " doesn't exist";
}


// Get Application Profile ID, Monitor ID and Pool ID
method = "GET";
uri = "/api/4.0/edges/" + edgeId + "/loadbalancer/config/virtualservers/" + virtualServerId;
body = "";
var VSIDUrl = uri;
// Get the pool ID

var request = nsxRestHost.createRequest(method, uri, body);
request.contentType = "application/xml";
response = request.execute().contentAsString;

var ind1 = response.indexOf("<defaultPoolId>") + "<defaultPoolId>".length;
var ind2 = response.indexOf("</defaultPoolId>");

var ind3 = response.indexOf("<applicationProfileId>") + "<applicationProfileId>".length;
var ind4 = response.indexOf("</applicationProfileId>");

poolId = response.substring(ind1, ind2);
applicationProfileId = response.substring(ind3, ind4);

method = "GET";
uri = "/api/4.0/edges/" + edgeId + "/loadbalancer/config/pools/" + poolId;
body = "";

request = nsxRestHost.createRequest(method, uri, body);
request.contentType = "application/xml";
/*var response = request.execute(); */
var response1 = request.execute().contentAsString;
//System.log(response1);

ind1 = response1.indexOf("<name>") + "<name>".length;
ind2 = response1.indexOf("</name>");

var poolName = response1.substring(ind1, ind2);


//Get Monitor ID
method = "GET";
uri = "/api/4.0/edges/" + edgeId + "/loadbalancer/config/pools/" + poolId;
body = "";

request = nsxRestHost.createRequest(method, uri, body);
request.contentType = "application/xml";
/*var response = request.execute(); */
var response1 = request.execute().contentAsString;

ind1 = response1.indexOf("<monitorId>") + "<monitorId>".length;
ind2 = response1.indexOf("</monitorId>");

ind3 = response1.indexOf("<name>") + "<name>".length;
ind4 = response1.indexOf("</name>");

var monitorId = response1.substring(ind1, ind2);]]></script>
    <in-binding>
      <bind name="nsxRestHost" type="REST:RESTHost" export-name="nsxRestHost"/>
      <bind name="edgeId" type="string" export-name="edgeId"/>
      <bind name="virtualServerName" type="string" export-name="virtualServerName"/>
    </in-binding>
    <out-binding>
      <bind name="virtualServerId" type="string" export-name="virtualServerId"/>
      <bind name="poolId" type="string" export-name="poolId"/>
      <bind name="monitorId" type="string" export-name="monitorId"/>
      <bind name="applicationProfileId" type="string" export-name="applicationRuleId"/>
    </out-binding>
    <position y="55.40909090909091" x="344.5"/>
  </workflow-item>
  <workflow-item name="item0" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="172.68181818181816" x="385.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[errorContent = errorCode;]]></script>
    <in-binding>
      <bind name="errorCode" type="string" export-name="errorCode"/>
    </in-binding>
    <out-binding>
      <bind name="errorContent" type="string" export-name="errorContent"/>
    </out-binding>
    <position y="119.04545454545453" x="345.0"/>
  </workflow-item>
  <presentation>
    <p-param name="edgeName">
      <desc><![CDATA[edgeName]]></desc>
      <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
    </p-param>
    <p-param name="virtualServerName">
      <desc><![CDATA[virtualServerName]]></desc>
      <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
    </p-param>
  </presentation>
</workflow>