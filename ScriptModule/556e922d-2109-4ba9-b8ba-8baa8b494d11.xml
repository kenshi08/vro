<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="classifyWithManifest" result-type="void" api-version="6.0.0" id="556e922d-2109-4ba9-b8ba-8baa8b494d11" version="0.0.3" allowed-operations="evf" category-name="com.vmware.o11n.plugin.puppet.manifest">
  <param n="master" t="Puppet:Master"/>
  <param n="dataDir" t="string"/>
  <param n="nodeName" t="string"/>
  <param n="classes" t="Properties"/>
  <param n="replaceAssignedClasses" t="boolean"/>
  <script encoded="false"><![CDATA[function formatHashArray(value, indent) {
	var isArray = Array.isArray(value);
	var valueIndent = indent + "    ";
 	var text = isArray ? "[" : "{";

    var i = 0;
    for(var k in value) {
        if (i++ > 0) {
            text += ",";
        }

		text += "\n" + valueIndent;

        if (!isArray) {
        	text += escapePuppetString(k) + " => ";
        }

  		text += escapePuppetValue(value[k], valueIndent);
    }

	if (i > 0) {
		text += ("\n" + indent)
	}

 	text += isArray ? "]" : "}";

    return text;
}

function escapePuppetString(str) {
	return '"' + str.toString().replace("\\", "\\\\").replace("'","\\'").replace('"', '\\"').replace("$", "\\$") + '"';
}

function escapePuppetValue(value, indent) {
	if (value === null || value === undefined) {
		return "undef";
	}

	var type = typeof(value);
	if (type === "boolean" || type === "number") {
		return value.toString();
	}

	if (type === "object") {
		return formatHashArray(value, indent);
	}

	// string
	if (value === "true" || value === "false" || value === "undef") {
		return value;
	}

	// Is JSON array or hash
	if (/^\s*(?:\[[\s\S]*\]|\{[\s\S]*\})\s*$/.test(value)) {
		try {
			var o = JSON.parse(value);
			return formatHashArray(o, indent);
		}
		catch (e) {
			System.log("Invalid JSON format. content=" + value);
		}
	}

	return escapePuppetString(value);
}

// Check for invalid characters (.. * ? [ ]) in node name
if (!nodeName || /\.\.|\*|\?|\[|\]/.test(nodeName)) {
	throw "Invalid node name value '" + nodeName + "'";
}

// Make sure node name is in lowercase
nodeName = nodeName.toLowerCase();

var manifest = "";
var remoteFilePath = dataDir + (dataDir.substring(-1) === "/" ? "" : "/") + nodeName + ".pp";

if (replaceAssignedClasses) {
	System.log("Replacing the list of assigned classes");
} else {
	System.log("Updating the list of assigned classes");

	if (classes == null || Object.keys(classes).length == 0) {
		System.warn("No class selected for classification");
		return;
	}

	System.log("Get existing manifest file from Puppet Master. nodeName=" + nodeName + " remoteFile=" + remoteFilePath);

	var result = master.getFileContent(remoteFilePath);
	if (result.exitCode === 0) {
		manifest = result.output;
	}
	else {
		System.log("No existing manifest file");
	}
}

if (manifest.trim() === "") {
	manifest = "# THIS FILE IS AUTOMATICALLY GENERATED BY VMWARE VCO PUPPET PLUGIN. DO NOT EDIT!\n";
}

var nodeBeginHeader = "# VMWARE-VCO-PUPPET-PLUGIN-NODE-BEGIN: " + nodeName + "\n"
					  + "node " + escapePuppetString(nodeName) + " {\n";
var nodeEndHeader = "}\n"
				    + "# VMWARE-VCO-PUPPET-PLUGIN-NODE-END: " + nodeName + "\n";

var nodeBeginIndex = manifest.indexOf(nodeBeginHeader);
var nodeEndIndex = manifest.indexOf(nodeEndHeader);
var nodeSection = "";

if (nodeBeginIndex >= 0 && nodeEndIndex >= 0) {
	nodeSection = manifest.substring(nodeBeginIndex + nodeBeginHeader.length, nodeEndIndex);
}

for (var className in classes) {
	var classParameters = classes[className];

	var classBeginHeader = "  # VMWARE-VCO-PUPPET-PLUGIN-CLASS-BEGIN: " + className + "\n"
					       + "  class { " + escapePuppetString(className) + ":\n";
	var classEndHeader = "  }\n"
					     + "  # VMWARE-VCO-PUPPET-PLUGIN-CLASS-END: " + className + "\n";

	var classBeginIndex = nodeSection.indexOf(classBeginHeader);
	var classEndIndex = nodeSection.indexOf(classEndHeader);

	var classSection = "";

	for (var key in classParameters) {
		var value = classParameters[key];
		if (System.getModule("com.vmware.o11n.plugin.puppet").isDefaultClassParameterValue(value)) {
			continue;
		}

		var paramSection = "    # VMWARE-VCO-PUPPET-PLUGIN-PARAMETER-BEGIN: " + key + "\n"
						   + "    " + key + " => " + escapePuppetValue(value, "        ") + ",\n"
						   + "    # VMWARE-VCO-PUPPET-PLUGIN-PARAMETER-END: " + key + "\n";
		classSection += paramSection;
	}

	classSection = classBeginHeader + classSection + classEndHeader;

	if (classBeginIndex >= 0 && classEndIndex >= 0) {
		nodeSection = nodeSection.substring(0, classBeginIndex) + classSection + nodeSection.substring(classEndIndex + classEndHeader.length);
	}
	else {
		nodeSection += classSection;
	}
}

nodeSection = nodeBeginHeader + nodeSection + nodeEndHeader;

if (nodeBeginIndex >= 0 && nodeEndIndex >= 0) {
	manifest = manifest.substring(0, nodeBeginIndex) + nodeSection + manifest.substring(nodeEndIndex + nodeEndHeader.length);
}
else {
	manifest += nodeSection;
}

System.debug("--- manifest ---\n" + manifest);

// Save manfiest in a temp file
var remoteFilePathTmp = remoteFilePath + ".tmp";

System.log("Put temp file. nodeName=" + nodeName + " remoteFile=" + remoteFilePathTmp);

var result = master.putFileContent(manifest, remoteFilePathTmp);
if (result.exitCode !== 0) {
	throw "Failed to put manifest file on Puppet Master. Please make sure the directory exists and is writable by the Puppet plugin connection. exitCode=" + result.exitCode + " remoteFile=" + remoteFilePathTmp;
}

try {
	System.log("Validating manifest temp file. remoteFile=" + remoteFilePathTmp);

	// Validate manfiest temp file
	var result = System.getModule("com.vmware.o11n.plugin.puppet").executeCommand(master, "puppet", ["parser", "validate", remoteFilePathTmp]);
	if (result.exitCode !== 0) {
		throw "Failed to validate new manifest file. exitCode=" + result.exitCode + " output=" + result.output + " error=" + result.error;
	}

	System.log("Move manifest temp file to final location. oldFile=" + remoteFilePathTmp + " newFile=" + remoteFilePath);

	// Remove ".tmp" extension
	var result = System.getModule("com.vmware.o11n.plugin.puppet").executeCommand(master, "mv", ["-f", remoteFilePathTmp, remoteFilePath]);
	if (result.exitCode !== 0) {
		throw "Failed to move file '" + remoteFilePathTmp + "' -> '" + remoteFilePath + "'. exitCode=" + result.exitCode + " output=" + result.output + " error=" + result.error;;
	}
}
catch (e) {
	try {
		// Remove manifest temp file
		System.getModule("com.vmware.o11n.plugin.puppet").executeCommand(master, "rm", ["-f", remoteFilePathTmp]);
	}
	catch (e2) {
	}

	throw e;
}]]></script>
</dunes-script-module>